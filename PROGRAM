# MATLAB
#Matrices
x=[1,2,3]
X=[1;4;7]
Y=[1,2,3;2,3,4;4,5,6]
z=1:4:7# increse by step of 4 
r=100:-10:-100


#to acces an elemet in a matrices
x=[1:4;2:5;3:6]
 x(2,3)
 x(2,[1 3])
 
 #to change element
x(2,3)=97
x =
     1     2     3     4
     2     3    97     5
     4     5     6     7
     
     x(5,4)=34
     
     
     #COMBINING MATRICES
     A1=[1 1 1;1 1 1]
A1 =
     1     1     1
     1     1     1
>> A2=[2 2 2;2 2 2]
A2 =
     2     2     2
     2     2     2
>> A3=[3 3 3;3 3 3]
A3 =
     3     3     3
     3     3     3
>> [A1 A2 A3]
ans =
     1     1     1     2     2     2     3     3     3
     1     1     1     2     2     2     3     3     3
>> [A1; A2; A3]
ans =
     1     1     1
     1     1     1
     2     2     2
     2     2     2
     3     3     3
     3     3     3
     
     #TRANPOSITION OPERATOR
     
     
      A2=[2 2 2;2 2 2]
A2 =
     2     2     2
     2     2     2
>> G=A2'
G =
     2     2
     2     2
     2     2
     
     
     
     ###ARRAY OPERATION
     
     
     
      HISHG=[72 53 45; 65 71 64]
HISHG =
    72    53    45
    65    71    64
>> CALI =[1 2 3;1 4 5]
CALI =
     1     2     3
     1     4     5
>> HIHG=HISHG.*CALI
HIHG =
    72   106   135
    65   284   320
    
    
    #OVER DIVSION
A1./A2
ans =
    0.5000    0.5000    0.5000
    0.5000    0.5000    0.5000
    
    
    #UNDER DIVISION
    
    A1.\A2
ans =
     2     2     2
     2     2     2
     
     
     
    #EXPONENTIATION 
     A1.^A2
ans =
     1     1     1
     1     1     1
>> A1=[1 1 ;1 1 ]
W1 =
     1     1
     1     1
>> W1^2
ans =
     2     2
     2     2
    






#functions


#in editor type edit in the command window

function myRand
a=1+rand(3,4)*9
end




#by typing myRand in the command window
 myRand
a =
    7.1086    4.5300    7.3544    1.4155
    7.8197    6.8993    1.2865    1.8742
    7.6882    2.5407    3.4923    8.4111
    
    
    
    #to use the variabe outside the function we use output
    
 function a=myRand
a=1+rand(3,4)*9;
end

#command window
b=myRand
b =
    7.2029    1.7544    2.3714    9.9652
    7.7334    3.0608    8.4324    1.7036
  5.0549    9.2200    5.8451    4.9841



function a=myRand(low,high)
a=low+rand(3,4)*(high-low)

#command window
test=myRand(2,5)









function [a,s]=myRand(low,high)
a=low+rand(3,4)*(high-low);
v=a(:);
s=sum(v);
end

#command window
[x ss]=myRand(2,3)
x =
    2.5752    2.3532    2.0430    2.7317
    2.0598    2.8212    2.1690    2.6477
    2.2348    2.0154    2.6491    2.4509
ss =
   28.7510
   
   
   
   
   
   
   
   
   
   #sub function
   #only the first function can be calleed from outside
   
   function [a,s]=myRand(low,high)
a=low+rand(3,4)*(high-low);
v=a(:);
s=sumAllElements(a);

function summa = sumAllElements(M)
v=M(:);
summa=sum(v);





#scope


function [a,s]=myRand(low,high)
a=low+rand(3,4)*(high-low);
global v;
v=a(:);
s=sumAllElements(a);

function summa = sumAllElements(M)
v=M(:);
summa=sum(v);









#script
#in editor 

y=x+3;
z=2*y;

 edit example_script
 x=3
x =
     3
 example_script
 
 
 
 
 
 
 
 
 
 
 
 #TOOLBOX
 
 
 
 
 #POLYMORPHISM PROPERTY OF sqrt
 sqrt(9)
 
 ans=3
  sqrt([1 4;9 16;25 36])
ans =
     1     2
     3     4
     5     6
 


sum(v)
ans =
    10
 A=([1,2;3,4;5,6])
A =
     1     2
     3     4
     5     6
 sum(A)
ans =
     9    12


 
 
 a=max(v)
a =
     4
 a=max(A)
a =
     5     6
     
     
     
     A=size([1,2;3,4;5,6])
A =
     3     2


zeros(5,6)
ans =
     0     0     0     0     0     0
     0     0     0     0     0     0
     0     0     0     0     0     0
     0     0     0     0     0     0
     0     0     0     0     0     0
     
     
     
     5*ones(4,2)
ans =
     5     5
     5     5
     5     5
     5     5
     
     
     
      diag([7 3 9 1])
ans =
     7     0     0     0
     0     3     0     0
     0     0     9     0
     0     0     0     1
     
     
     
     
     rand(3,4)
ans =
    0.8147    0.9134    0.2785    0.9649
    0.9058    0.6324    0.5469    0.1576
    0.1270    0.0975    0.9575    0.9706


#to get whole number part of that number


fix(1+rand(5,4)*10)
ans =
     3     7     6     4
    10     5    10     6
     4     4     3     1
     2     9     8     1
     3     6     8     6
     
     
randi(10,5,4)  #maximum value is 10 and matrix is 5*4
ans =
     8     1     6     7
    10     4     2     8
     2     2     7     5
     6     8     3     1
     5     4     7     3     
      randi([4 7],5,4)
ans =
     7     4     7     5
     4     5     7     7
     7     4     7     5
     6     7     4     7
     7     4     5     4
     
     #standard normal distribution
randn(5)
ans =
   -0.3538    0.0335    0.0229   -0.9792    0.5201
   -0.8236   -1.3337   -0.2620   -1.1564   -0.0200
   -1.5771    1.1275   -1.7502   -0.5336   -0.0348
    0.5080    0.3502   -0.2857   -2.0026   -0.7982
    0.2820   -0.2991   -0.8314    0.9642    1.0187
    
    
    rng('shuffle');
 [rand,randn,randi(10)]
ans =
    0.8392   -1.0169    2.0000
    
    
    
    
    #INPUT 
    
 #editor window
function a= one_more
x=input("gimme a number buddy");
a=x+1;
end
#command window

one_more






#to print a number



fprintf("print the number")
print the number




#checkout


function check_out(n,price)
total=n*price;


#command window
fprintf('%d items at %.1f  each total =%4.2f',n ,total,price);#%.2f is number of decimal places#4.2 is number of number say here8,.,1,3 4 numbers there can be printed


#plot

t=[-10:10]
plot(a)
 a=(-10:10).^2
a =
  Columns 1 through 16
   100    81    64    49    36    25    16     9     4     1     0     1     4     9    16    25
  Columns 17 through 21
    36    49    64    81   100
    
    
    
    #plot(x,y)
    plot(t,a)





#plotting two figures

x1=0:.1:2*pi;y1=sin(x1)
x2=pi/2:.1:3*pi/2 ;y2=cos(x2);
 plot(x1,y1,'r',x2,y2,'k')
 legend('sin','cosine')
 plot(t,b,'m--o')
 
 
 
 
 #hold on allow to not remove the other plot
 #hold of remove the other plot
 
 plot(x2,y2,'k');
 hold on;
plot(x1,y1,'g');
hold off;
 
title("sine")
 xlabel("x")
 ylabel("y")
 
 
 
 
 axis([1 2 3 5])#[#x axis left ,right #y axis left,right]
 
 close(2)#close the figure 2
 







#if statement

#editor window
function rand_int(x)
if x==2
    fprintf("the guess is correct");
end

#command window
x=2



#if else
function rand_int(x)
if x==2
    fprintf("the guess is correct");
elseif x<42
    fprintf("guees is wrong")
else
    fprintf("gueess ")
end



#using if else for week



function day_of_week(n)
if n==1
    fprintf("it is sunday");
    data_type=1;
elseif n==2
    fprintf("it is monday");
    data_type=2;
elseif n==3
    fprintf("it is tuesday");
    data_type=2;
elseif n==4
    fprintf("it is wednesday");
    data_type=2;
elseif n==5
    fprintf("it is thursday");
    data_type=2;
elseif n==6
    fprintf("it is friday");
    data_type=2;
elseif n==7
    fprintf("it is saturday");
    data_type=1;
else
    fprintf("no. is not 1 to 7");
    return # it quits the function and disregard all the statement following it
end    
    if data_type==2
        fprintf("it is a weeekday\n");
    else
        fprintf("it is a weeekend\n");
    end











#RELATIONAL OPERATOR


#EVERY RELATIONAL OPERATOR RETURN 0 WHEN EXPRESSION IS FALSE ,1 IF TRUE
 10==20
ans =
  logical
   0
 3==(35-32)
ans =
  logical
   1
   
  
  
  #RELational operation to vector
    [1 2 3 4]>[-1 2 3 4]
ans =
  1×4 logical array
   1   0   0   0


[1 2 3 4]<=5
ans =
  1×4 logical array
   1   1   1   1
   
   
   sum([14 5 14 3 25 10]==14)
ans =
     2




#LOGICAL OPERATOR &&(BINARY),||(BINARY),~(UNARY)(0 FOR FALSE NON ZERO FOR TRUE)

#jto find if the fucntion is increasing or not
function a=order3(x,y,z)
if x>=y&& y>=z
    a=-1;
elseif x<=y&& y<=z 
    a=1;
else
    a=0;
end


#to see if the function is not the smallest
function a=not_smallest(x,y,z)
if x>=y|| x>=z
    a=1;
else
    a=0;
end


 8&&9
ans =
  logical
   1


 logical
   1
 0&&9
ans =
  logical
   0
 9&&0
ans =
  logical
   0
 1||0
ans =
  logical
   1
 0||0
ans =
  logical
   0






#array version of operand





[1 2 3 4] &[0 1 2 0]
ans =
  1×4 logical array
   0   1   1   0
>> [1 2 3 4] | [0 1 2 0]
ans =
  1×4 logical array
   1   1   1   1
   
   
   
   
   
   [1 2 3 4] | 3
ans =
  1×4 logical array
   1   1   1   1















#HOW WE MAKE OUR FUNCTION POLYMORPHIC
#NARGIN :-RETURNS THE NUMBER OF ACTUAL INPUT ARGUMENT THAT THE FUNCTION ARE CALLED WITH
#NARGOUT :-RETURNS THE NUMBER OF OUTPUT ARGUMENT THAT THE FUNCTION  CALLER REQUESTED






function [table summa]= mutable(n,m)

if nargin<1
error('must have atleast one argument');
if nargin<2
    m=n;    
   elseif ~isscalar(m)|| m<1|| m~=fix(m)
   error("m needs to be an positive integer");
end
if ~isscalar(n)|| n<1|| n~=fix(n)
   error("n needs to be an positive integer");
table=(1:n)' *(1:m);
 
if nargout==2
    summa=sum(table(:));
end



#command window


 mutable(3)
ans =
     1     2     3
     2     4     6
     3     6     9

table =mutable(3,4)
table =
     1     2     3     4
     2     4     6     8
     3     6     9    12




[table summa]=mutable(3,4)
table =
     1     2     3     4
     2     4     6     8
     3     6     9    12
summa =
    60






#PERSISTENT VARIABLE
#IT IS A LOCAL VARIABLE BUT ITS VALUE PERSIST FROM ONE FUNCTION CALL TO ANOTHER




function total=accumulate(n)
persistent summa;
if isempty(summa)
    summa=n;
else 
    summa=summa+n;
    
end
total=summa;


#command window

 accumulate(3)
ans =
     3
>> accumulate(5)
ans =
     8
 clear accumulate
accumulate(17)
ans =
    17
 accumulate(7)
ans =
    24
 accumulate(9)
ans =
    33
 clear accumulate
 accumulate(12)
ans =
    12


for loop

total =0;
for n=1:5
total=total+n
end


function randcheck
N=5;
list=rand(1,N);
for x=list
    if x>.5
        fprintf("the number is large",x)
    else 
        fprintf("the nuber is small",x)
    end
end   




for i=1:length(u)
w(i)=u(i)-v(i);
end


#while loop


function  [n total]=possum(limit)
total=0;
n=0;
while total<=limit
    n=n+1;
    total=total+n;
end
fprintf("thenumber value%d and total are %d",n,total);


#next prime


function k=next_prime(n)
k=n+1;
while isprime(k)~=1
    k=k+1 ;
end     



logical indexing



function w=next_prime(v)
w=v(v>=0);#store in w only those logical values wehere the v vector is logical 1 

w=next_prime([7,-1,2,3,-1,-3,4])
w =
     7     2     3     4
     
     
     w=[1>2,1==3,2<0]
w =
  1×3 logical array
   0   0   0
   
   
    v=[1,2,3,-4,-5,5,7,-2,10]
v =
     1     2     3    -4    -5     5     7    -2    10
 keepers=v>=0
keepers =
  1×9 logical array
   1   1   1   0   0   1   1   0   1
   
   
   
   name=[10==10,2>1,3>3,4<2,5>11,34>21,20<22,9>10]
name =
  1×8 logical array
   1   1   0   0   0   1   1   0
 v=[1,3,4,2,4,3,5,6]
v =
     1     3     4     2     4     3     5     6
 w=v(name)
w =
     1     3     3     5


#compare 


v=[1,3,4,2,4,3,5,6]
v =
     1     3     4     2     4     3     5     6
 name=[1,2,3,4,1,1,2,10]
name =
     1     2     3     4     1     1     2    10
w=v(v>name)
w =
     3     4     4     3     5
     
     
      v(v<4)=0
v =
     0     0     4     0     4     0     5     6
#logical indexing in left only change the values 
but logical indexing on the right omit the values



 A=randn(5)
A =
    0.5377   -1.3077   -1.3499   -0.2050    0.6715
    1.8339   -0.4336    3.0349   -0.1241   -1.2075
   -2.2588    0.3426    0.7254    1.4897    0.7172
    0.8622    3.5784   -0.0631    1.4090    1.6302
    0.3188    2.7694    0.7147    1.4172    0.4889
A(A<0)=0
A =
    0.5377         0         0         0    0.6715
    1.8339         0    3.0349         0         0
         0    0.3426    0.7254    1.4897    0.7172
    0.8622    3.5784         0    1.4090    1.6302
    0.3188    2.7694    0.7147    1.4172    0.4889
>> 

#for finding number of days with temperature less than 32
function numfreeze= freezing(A)
B=A(A<32);
[row,col]=size(B);
numfreeze=col;



WEEK 7
DATA TYPES

#A DATA TYPE IS DEFINED BY
#SET OF VALUES
#SET OF OPERATION THAT CAN BE PERFORMED ON THOSE VALUES

#IN MATLAB ALL ELEMENT OF A GIVEN ARRAY MUST BE OF SAME TYPE ELEMETARY TYPE


 x=23
x =
    23
>> class(x)
ans =
    'double'
>> class(sqrt(-1))
ans =
    'double'
>> rand(3,4)
ans =
    0.8147    0.9134    0.2785    0.9649
    0.9058    0.6324    0.5469    0.1576
    0.1270    0.0975    0.9575    0.9706
>> whos
  Name      Size            Bytes  Class     Attributes

  ans       3x4                96  double              
  x         1x1                 8  double              
whos print out the list of existing variable and the current workspace


#DOUBLE IS THE DEFAULT MATLAB DATA TYPE

12.34=1234*10^-2
1234 IS CALED THE MANTISSA AND -2 PART IS CALLED THE EXPONENET
MATLABUSES 8 BYTES OF MEMORY FOR ALL THE DOUBLE
APART FROM DOUBLE SINGLE IS THE ONLY FLOATING TYPE IN SUPOERTED BY THE MATLAB HAVING 32 BITS


INTEGER TYPES 
SIGNED AND UNSIGNED

8,16,32,64 BIT LONG BOTH SIGNED AND UNSIGNED


FOR CHECKING DATA TYPE 
CLASS RETURN DATA TYPE
isa(x,'double) it checks whether the data types are same of written in the first argue=ment to second argument
intmax,intmin maximum minimum for integer type
realmin,realmax same for floating point type
conversion function

int8(x),uint32(x),double(x)


ARITHMETIC OPERATORS

SAME DATA TYPE NO PROBLEM
FOR DIFFERNET DATA TYPE WE HAVE MIXED MODE ARITHMETIC



RELATIONAL OPERATORS

DIFFERNET DATA TYPES ARE ALWAYS ALLOWED
RESULT ALWAYS OF LOGICAL TYPE


##CHARACTER ARRAYS

TEXT IS ANOTHER KIND OF DATA THAT COMPUTER NEED TO MANIPULATE

STRING IS VECTOR OF CHARACTER

IT IS A VECTOR WHOSE ELEMENTARY TYPE IS CHAR
CHAR IS NUMERICAL DATA TYPE IT USES AN ENCODING SCHEMEE EACH CHARACTER IS REPRESENTED BY A NUMBER ASCII
ASCII CHARACTER CODE IS 7 BIT LONG SO IT HAS 128 CHARACTERS LIKE LATIN ALPHABET ,DIGITS,PUNCTUATION,SPECIAL CHARACTERS
NEWER SCHEMES WITH FAR MORE CHARACTERS
ASCII IS A SUBSET OF THEM

function char_codes
for ii =33:126
    fprintf('%s',ii);# %s tells  
end
fprintf('%s',10);
>> char_codes
!"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~

%s tell to covert numbere to equivalent char


>> MOOC_title='MATLAB for Smarties' 
MOOC_title =
    'MATLAB for Smarties'
>> MOOC_title(1)
ans =
    'M'
>> MOOC_title(1:6)
ans =
    'MATLAB'
>> MOOC_title(end -8:end)
ans =
    ' Smarties'
>> length(MOOC_title)
ans =
    19


#since size is diffrent we cant just do array operation
>> tx1='sddssdfs'
tx1 =
    'sddssdfs'
>> tx2='sdsfs'
tx2 =
    'sdsfs'
>> tx1==tx2
Arrays have incompatible sizes for this operation.
#logical answer
tx1='sddssdfs'
tx1 =
    'sddssdfs'
>> tx2='sdsfskkk'
tx2 =
    'sdsfskkk'
>> tx1==tx2
ans =
  1×8 logical array
   1   1   0   0   1   0   0   0
   
   
   
   
   tx2='sdsfskkk sfsdfs ssd'
tx2 =
    'sdsfskkk sfsdfs ssd'
>> code=double(tx2)
code =
  Columns 1 through 16
   115   100   115   102   115   107   107   107    32   115   102   115   100   102   115    32
  Columns 17 through 19
   115   115   100
>> tx1=char(code+3)
tx1 =
    'vgvivnnn#vivgiv#vvg'

 tx1=['sdsd';'sdff';'sfjs']
tx1 =
  3×4 char array
    'sdsd'
    'sdff'
    'sfjs'
>> tx1'
ans =
  4×3 char array
    'sss'
    'ddf'
    'sfj'
    'dfs'


findstr:-searching for a string inside a string
num2str:-convert number to/from a string
str2num;-convert string to number
strcmp:-compare string
lower:-convert string to lower case
upper:-convert string to upper case
spritnf-:write formatted data to string




#findstr

tx2='sdsfskkk'
tx2 =
    'sdsfskkk'
>> findstr(tx2,'sds')
ans =
     1
>> findstr(tx2,'s')
ans =
     1     3     5
     
 #    strcmp
 strcmp(tx2,'s')
ans =
  logical
   0
>> strcmp(tx2,'sdsfs')
ans =
  logical
   0
>> strcmp(tx2,'sdsfskkk')
ans =
  logical
   1     
   
   
   
   #ignoring case
   strcmpi(tx2,'Sdsfskkk')
ans =
  logical
   1
   
   #here character gets converted to a double
    digit=3.1453
digit =
    3.1453
>> name='3.1453'
name =
    '3.1453'
>> name+1
ans =
    52    47    50    53    54    52
    
    
    #str2num
     str2num(name)
ans =
    3.1453
    
    
    
    fprintf('%.2f %.2f',r,pi*r^2)
12.00 452.39
>> sprintf('%.2f %.2f',r,pi*r^2)
ans =
    '12.00 452.39'
>> str=sprintf('%.2f %.2f',r,pi*r^2);
>> str
str =
    '12.00 452.39'
    #sprintf puts result in the output argument type of it is char


function coded =caesar(s,n)
 coded=char(mod((double(s)+n-32),95)+32);
end

ceaser cipher ascii




#STRUCTURE


